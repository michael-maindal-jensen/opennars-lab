package org.opennars.lab.nlp2;

import org.opennars.interfaces.pub.Reasoner;
import org.opennars.io.Parser;
import org.opennars.lab.nlp.PartOfSpeech;
import org.opennars.lab.nlp2.generators.NaturalLanguageTrainingTuple;
import org.opennars.lab.nlp2.generators.PairGenerator;
import org.opennars.lab.nlp2.generators.TestPairGenerator;
import org.opennars.main.Nar;
import org.xml.sax.SAXException;

import javax.xml.parsers.ParserConfigurationException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

/**
 * small test to show how the different components of this package interact with each other
 *
 * it also shows a use of the API's for this NLP facility
 */
public class Nlp2Test {
    public static void main(final String[] args) throws IOException, InstantiationException, InvocationTargetException, NoSuchMethodException, ParserConfigurationException, IllegalAccessException, SAXException, ClassNotFoundException, ParseException, Parser.InvalidInputException {
        /// TemporalNlpComponent(which is used for building the NLP knowledge) needs a TemporalConsumer
        /// the implementation of the temporal consumer just builds a list of NaturalLanguageRelationshipTuple
        DefaultTemporalConsumer temporalConsumer = new DefaultTemporalConsumer();

        /// we need this component to convert the rules which are generated by the tuple-generators
        /// to rules which other components can consume
        TemporalNlpComponent temporalNlpComponent = new TemporalNlpComponent(temporalConsumer);

        temporalNlpComponent.initalize();

        List<PairGenerator> pairGenerators = new ArrayList<>();
        pairGenerators.add(new TestPairGenerator());


        // "training" - let generators generate training pairs and process it with NARS
        /// iterate over all pairs of all generators
        for (final PairGenerator iPairGenerator : pairGenerators) {
            if (!iPairGenerator.hasNextTuple()) {
                break;
            }

            final NaturalLanguageTrainingTuple iTrainingTuple = iPairGenerator.generateNextTuple();

            final String iTrainingNlpSentence = iTrainingTuple.trainingNlpSentence;
            final String iTrainingRelationship = iTrainingTuple.trainingRelationship;

            /// tokenize appliedNaturalSentence and convert to narsese
            final String[] tokens = PartOfSpeech.split(iTrainingNlpSentence);
            final String appliedNaturalSentenceAsNarsese = PartOfSpeech.convTokensToNarsese(tokens);

            temporalNlpComponent.processPair(appliedNaturalSentenceAsNarsese, iTrainingRelationship);
        }

        Reasoner queryReasoner = new Nar();
        QueryComponent query = new QueryComponent(queryReasoner);
        // apply the learned knowledge to a sentence
        final String querySentence = "that is a small test";

        query.resetAnswers();
        query.applyLearnedRulesToNaturalSentence(temporalConsumer.relationshipTuples, querySentence);
        int here = 5;
    }


}
